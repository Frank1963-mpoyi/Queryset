>>> from queries.models import *
>>> a = Blog(name='Beatles Blog', tagline='All the latest Beatels news.')
>>> a.save()
>>> a
<Blog: Beatles Blog>
>>> 
# to create an object, instantatiate it using keyword argument to the model class, then call call save()
#to save it to the database

>>> a.name = "John Doe"
>>> a.save()
# change and update the record in name

# SAVING FOREIGNKEY 
#------------------

>>> entry = Entry.objects.get(pk=1) # get first the primary key of object where the foreign key is 
>>> cheese_blog = Blog.objects.get(name="John Doe") # get the name of object Blog
>>> entry.blog = cheese_blog # now assign the foreign key in Entry to the Blog name 
>>> entry.save()


"""
>>> entry1 = Entry.objects.get(pk=1) Get first the object
>>> blog = Blog.objects.get(name="Beatles Blog2") Get the name of inheritance foreign key
>>> entry.blog = blog # object instance.Entryfield (where foreign key allocate) 
>>> entry.save() # than save
>>>
"""

#AND ManyToMany FIELD
#---------------------
>>> joe = Author.objects.create(name="Joe") 
>>> entry.authors.add(joe) # entry is the Instance of Entry. authors is a field name, and add the new name

>>> john = Author.objects.create(name="John")
>>> paul = Author.objects.create(name="Paul")
>>> george = Author.objects.create(name="George")
>>> ringo = Author.objects.create(name="Ringo")
>>> entry.authors.add(john, paul, george, ringo)

# RETRIEVE 

Each model has at least one Manager, and itâ€™s called objects by default. 
Access it directly via the model class, like so:

Blog.objects.all() #The all() method returns a QuerySet of all the objects in the database.

# RETRIEVE SPECIFIC OBJECT WITH FILTER 

Entry.objects.filter(pub_date__year=2006) # pub_date is a field name
Entry.objects.all().filter(pub_date__year=2006) same as above

# ITIRATE TRHOUGH QUERY

>>> print([e.name for e in Blog.objects.all()])
['Beatles Blog', 'Beatles Blog2', 'Beatles Blog3', 'Beatles Blog1', 'Beatles Blog BAd', 'John Doe']
>>>

same as 
>>> query = Blog.objects.all()
>>> print([e.name for e in query])
['Beatles Blog', 'Beatles Blog2', 'Beatles Blog3', 'Beatles Blog1', 'Beatles Blog BAd', 'John Doe']
>>>


# create automatic in database witout saving it 
 a = Blog.objects.create(name="Lifoko du ciel", tagline="Plein succes")
 a = Blog.objects.create(name="Akuala Temple", tagline="Plein succes")